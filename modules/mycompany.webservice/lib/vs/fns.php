<?
/*Модуль Веб-сервиса обмена сообщениями
Поддерживаемые форматы: XML
Правообладатель: "АО MyCompany"*/

namespace MyCompany\WebService\VS;

use Exception;
use MyCompany\WebService\Helper;
use MyCompany\WebService\Log;

/* инфоблок заявок в ФНС */
class Fns implements \MyCompany\WebService\VSRequestExternelService{
    const WORKFLOW_ID = '';
    const IBLOCK_ID = '20';
    const GLOSSARY = [
        'СвЮЛ' => 'Сведения о юридическом лице',
        'ДатаВып' => 'Дата формирования сведений из ЕГРЮЛ в отношении юридического лица',
        'ОГРН' => 'Основной государственный регистрационный номер юридического лица',
        'ДатаОГРН' => 'Дата присвоения ОГРН',
        'ИНН' => 'ИНН аккредитованного филиала / представительства иностранного юридического лица',
        'КПП' => 'КПП аккредитованного филиала / представительства иностранного юридического лица',
        'СпрОПФ' => 'Наименование классификатора, по которому введены сведения об организационно-правовой форме: ОКОПФ, КОПФ',
        'КодОПФ' => 'Код по выбранному классификатору',
        'ПолнНаимОПФ' => 'Полное наименование организационно-правовой формы',
        'СвНаимЮЛ' => 'Сведения о наименовании юридического лица',
        'СвАдресЮЛ' => 'Сведения об адресе (месте нахождения)',
        'СвАдрЭлПочты' => 'Сведения об адресе электронной почты юридического лица',
        'СвОбрЮЛ' => 'Сведения о регистрации (образовании) юридического лица',
        'СвРегОрг' => 'Сведения о регистрирующем (налоговом) органе, внесшем запись в ЕГРЮЛ',
        'СвСтатус' => 'Сведения о форме реорганизации (статусе) юридического лица',
        'СвПрекрЮЛ' => 'Сведения о прекращении юридического лица',
        'СвТипУстав' => 'Сведения о типовом уставе, на основании которого действует юридическое лицо',
        'СвУчетНО' => 'Сведения об учете в налоговом органе',
        'СвРегПФ' => 'Сведения о регистрации юридического лица в качестве страхователя по обязательному пенсионному страхованию (ОПС)',
        'СвРегФСС' => 'Сведения о регистрации юридического лица в качестве страхователя по обязательному социальному страхованию (ОСС)',
        'СвУстКап' => 'Сведения о размере указанного в учредительных документах коммерческой организации уставного капитала (складочного капитала, уставного фонда, паевого фонда)',
        'СвПолном' => 'Сведения о полномочиях нескольких лиц выступать от имени юридического лица',
        'СвУпрОрг' => 'Сведения о юридическом лице, имеющем право без доверенности действовать от имени юридического лица, в отношении которого формируется выписка',
        'СведДолжнФЛ' => 'Сведения о физическом лице, имеющем право без доверенности действовать от имени юридического лица',
        'СвКорпДог' => 'Сведения о наличии корпоративного договора',
        'СвУчредит' => 'Сведения об учредителях (участниках) юридического лица',
        'СвКонвЗайм' => 'Сведения о договоре конвертируемого займа',
        'СвДоляООО' => 'Сведения о доле в уставном капитале общества с ограниченной ответственностью, принадлежащей обществу',
        'СвДержРеестрАО' => 'Сведения о держателе реестра акционеров акционерного общества',
        'СвОКВЭД' => 'Сведения о видах экономической деятельности юридического лица по Общероссийскому классификатору видов экономической деятельности',
        'СвЛицензия' => 'Сведения о лицензиях, выданных юридическому лицу',
        'СвПодразд' => 'Сведения о филиалах и представительствах юридического лица',
        'СвРеорг' => 'Сведения об участии в реорганизации',
        'СвПредш' => 'Сведения о правопредшественнике',
        'СвКФХПредш' => 'Сведения о крестьянском (фермерском) хозяйстве, на базе имущества которого создано юридическое лицо',
        'СвПреем' => 'Сведения о правопреемнике',
        'СвКФХПреем' => 'Сведения о крестьянском (фермерском) хозяйстве, которые внесены в ЕГРИП в связи с приведением правового статуса крестьянского (фермерского) хозяйства в соответствие с нормами части первой Гражданского кодекса Российской Федерации',
        'СвЗапЕГРЮЛ' => 'Сведения о записях, внесенных в ЕГРЮЛ',
        'НаимЮЛПолн' => 'Полное наименование иностранного юридического лица в русской транскрипции',
        'ГРНДата' => 'ГРН и дата внесения в ЕГРЮЛ записи, содержащей указанные сведения',
        'ГРНДатаИспр' => 'ГРН и дата внесения в ЕГРЮЛ записи об исправлении технической ошибки в указанных сведениях ',
        'СвНаимЮЛСокр' => 'Сведения о сокращенном наименовании юридического лица на русском языке',
        'СвНаимЮЛКодОКИН' => 'Сведения о наличии у юридического лица наименования на языках народов Российской Федерации и (или) на иностранных языках ',
        'СвНаимЮЛПолнИн' => 'Сведения о наименовании иностранного юридического лица - управляющего залогом в латинской транскрипции',
        'СвНаимЮЛСокрИн' => 'Сведения о сокращенном наименовании юридического лица на английском языке',
        'КодОКИН' => 'Код языка по классификатору ОКИН',
        'НаимОКИН' => 'Наименование языка по классификатору ОКИН',
        'ВидАдрКлассиф' => 'Вид адресного классификатора, используемого при формировании в выписках сведений об адресе',
        'СвМНЮЛ' => 'Сведения о месте нахождения юридического лица',
        'СвАдрЮЛФИАС' => 'Сведения об адресе юридического лица (в структуре ФИАС)',
        'АдресРФ' => 'Сведения об адресе юридического лица (в структуре КЛАДР)',
        'СвНедАдресЮЛ' => 'Сведения о недостоверности адреса',
        'СвРешИзмМН' => 'Сведения о принятии юридическим лицом решения об изменении места нахождения',
        'ИдНом' => 'Уникальный идентификатор адресного объекта в ГАР',
        'Регион' => 'Субъект Российской Федерации (код)',
        'НаимРегион' => 'Наименование (элемент регион)',
        'МуниципРайон' => 'Муниципальный район/ городской округ/ внутригородская территория города федерального значения/ муниципальный округ/ федеральная территория',
        'ГородСелПоселен' => 'Городское поселение / сельское поселение / межселенная территория в составе муниципального района / внутригородской район городского округа',
        'НаселенПункт' => 'Населенный пункт (город, деревня, село и прочее)',
        'ПризнНедАдресЮЛ' => 'Признак недостоверности адреса',
        'ТекстНедАдресЮЛ' => 'Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»',
        'РешСудНедАдр' => 'Сведения о решении суда, на основании которого адрес признан недостоверным',
        'ТекстРешИзмМН' => 'Текст, выводимый в выписке в строке с наименованием «Дополнительные сведения»',
        'Район' => 'Район (улус и т.п.)',
        'Город' => 'Город (волость и т.п.)',
        'НаселПункт' => 'Населенный пункт (село и т.п.)',
        'E-mail' => 'Адрес электронной почты',
        'СтатусМКФ' => 'Сведения о том, что юридическое лицо является международной компанией или международным фондом',
        'РегНом' => 'Регистрационный номер, присвоенный юридическому лицу до 1 июля 2002 года',
        'ДатаРег' => 'Дата регистрации',
        'НаимРО' => 'Наименование органа, зарегистрировавшего юридическое лицо до 1 июля 2002 года',
        'ИдКодЮЛ' => 'Идентификационный код юридического лица',
        'СпОбрЮЛ' => 'Способ образования юридического лица',
        'СвРегИнЮЛ' => 'Сведения о регистрации иностранного юридического лица до принятия решения об изменении его личного закона (редомициляции)',
        'КодСпОбрЮЛ' => 'Код способа образования по справочнику СЮЛНД',
        'НаимСпОбрЮЛ' => 'Наименование способа образования юридического лица',
        'ИННЮЛ' => 'ИНН юридического лица',
        'НаимЮЛПолнРус' => 'Полное наименование иностранного юридического лица, принявшего решение об изменении своего личного закона, в русской транскрипции',
        'НаимЮЛПолнЛат' => 'Полное наименование иностранного юридического лица, принявшего решение об изменении своего личного закона, в латинской транскрипции',
        'ОКСМ' => 'Код страны происхождения',
        'НаимСтран' => 'Наименование страны происхождения',
        'РегНомер' => 'Регистрационный номер в стране происхождения',
        'КодИОСтрРег' => 'Код налогоплательщика в стране происхождения или аналог',
        'КодНО' => 'Код органа по справочнику СОУН',
        'НаимНО' => 'Наименование регистрирующего (налогового) органа',
        'АдрРО' => 'Адрес регистрирующего органа',
        'СвРешИсклЮЛ' => 'Сведения о решении о предстоящем исключении юридического лица из ЕГРЮЛ и его публикации',
        'КодСтатусЮЛ' => 'Код формы реорганизации (статуса) юридического лица по справочнику СЮЛСТ',
        'НаимСтатусЮЛ' => 'Наименование формы реорганизации (статуса) юридического лица по справочнику СЮЛСТ',
        'СрокЛиквООО' => 'Срок ликвидации общества с ограниченной ответственностью',
        'ДатаРеш' => 'Дата вынесения судебным органом постановления о дисквалификации ',
        'НомерРеш' => 'Номер решения',
        'ДатаПубликации' => 'Дата публикации решения ',
        'НомерЖурнала' => 'Номер журнала, в котором опубликовано решение',
        'ДатаПрекрЮЛ' => 'Дата прекращения юридического лица',
        'СпПрекрЮЛ' => 'Способ прекращения юридического лица',
        'КодСпПрекрЮЛ' => 'Код способа прекращения по справочнику СЮЛПД',
        'НаимСпПрекрЮЛ' => 'Наименование способа прекращения',
        'НомТипУстав' => 'Номер типового устава',
        'ДатаПостУч' => 'Дата постановки на учет в налоговом органе',
        'СвНО' => 'Сведения о налоговом органе по месту нахождения филиала / представительства',
        'РегНомПФ' => 'Регистрационный номер в территориальном органе Пенсионного фонда Российской Федерации / Единый регистрационный номер страхователя',
        'ДатаПрисвНом' => 'Дата присвоения единого регистрационного номера страхователя',
        'СвОргПФ' => 'Сведения о территориальном органе Пенсионного фонда Российской Федерации / об органе в сфере социального страхования Российской Федерации',
        'КодПФ' => 'Код органа',
        'НаимПФ' => 'Наименование',
        'РегНомФСС' => 'Регистрационный номер в исполнительном органе Фонда социального страхования Российской Федерации / Единый регистрационный номер страхователя',
        'СвОргФСС' => 'Сведения об исполнительном органе Фонда социального страхования Российской Федерации / об органе в сфере социального страхования Российской Федерации',
        'КодФСС' => 'Код органа',
        'НаимФСС' => 'Наименование',
        'НаимВидКап' => 'Наименование вида капитала',
        'СумКап' => 'Размер в рублях',
        'ДоляРубля' => 'Доля рубля в виде простой дроби в номинальной стоимости доли',
        'СведУмУК' => 'Сведения о нахождении хозяйственного общества в процессе уменьшения уставного капитала',
        'ВелУмУК' => 'Величина, на которую уменьшается уставный капитал (в рублях)',
        'ВидПолном' => 'Вид полномочий',
        'ОгрДосСв' => 'Признак ограничений доступа к сведениям',
        'ГРНДатаПерв' => 'ГРН и дата внесения в ЕГРЮЛ сведений об управлении залогом доли участника',
        'НаимИННЮЛ' => 'Сведения о наименовании, ОГРН и ИНН юридического лица - управляющего залогом',
        'СвРегИн' => 'Сведения о регистрации иностранного юридического лица - управляющего залогом в стране происхождения',
        'СвНедДанУпрОрг' => 'Сведения о недостоверности данных о юридическом лице, имеющем право действовать без доверенности',
        'СвПредЮЛ' => 'Сведения о наименовании представительства или филиала в Российской Федерации, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации',
        'СвАкРАФП' => 'Сведения об аккредитации представительства или филиала в Российской Федерации, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации',
        'ДопСв' => 'Дополнительные сведения',
        'ПризнНедДанУпрОрг' => 'Признак недостоверности данных',
        'ТекстНедДанУпрОрг' => 'Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»',
        'РешСудНедДанУпрОрг' => 'Сведения о решении суда, на основании которого указанные сведения признаны недостоверными',
        'СвФЛ' => 'Сведения о фамилии, имени, отчестве и ИНН индивидуального предпринимателя',
        'СвФИОЗАГС' => 'Сведения о фамилии, имени, отчестве физического лица по данным ЗАГС',
        'СвДолжн' => 'Сведения о должности физического лица',
        'СвНедДанДолжнФЛ' => 'Сведения о недостоверности данных о лице, имеющем право без доверенности действовать от имени юридического лица',
        'ДопСвПолДолжФЛ' => 'Дополнительные сведения о полномочиях лица, имеющего право действовать без доверенности от имени юридического лица',
        'СвПолФЛ' => 'Сведения о поле физического лица',
        'СвГраждФЛ' => 'Сведения о гражданстве физического лица',
        'СвДискв' => 'Сведения о дисквалификации',
        'ОГРНИП' => 'ОГРНИП индивидуального предпринимателя',
        'ВидДолжн' => 'Вид должностного лица по справочнику СКФЛЮЛ (указывается код по справочнику)',
        'НаимВидДолжн' => 'Наименование вида должностного лица по справочнику СКФЛЮЛ',
        'НаимДолжн' => 'Наименование должности',
        'ПризнНедДанДолжнФЛ' => 'Признак недостоверности данных',
        'ТекстНедДанДолжнФЛ' => 'Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»',
        'РешСудНедДанДолжнФЛ' => 'Сведения о решении суда, на основании которого указанные сведения признаны недостоверными',
        'ПризДопСвПолДолжнФЛ' => 'Признак дополнительных сведений о полномочиях лица, имеющего право действовать без доверенности от имени юридического лица',
        'ТекстДопСвПолДолжнФЛ' => 'Текст дополнительных сведений о полномочиях лица, имеющего право действовать без доверенности от имени юридического лица, выводимый в выписке в строке с наименованием «Дополнительные сведения»',
        'ДатаНачДискв' => 'Дата начала дисквалификации',
        'ДатаОкончДискв' => 'Дата окончания дисквалификации',
        'ВидСведКорпДог' => 'Вид сведений в корпоративном договоре',
        'СвЗапретРаспДолями' => 'Сведения о запрете на распоряжение долями в уставном капитале юридического лица',
        'УчрЮЛРос' => 'Сведения об учредителе (участнике) - российском юридическом лице',
        'УчрЮЛИн' => 'Сведения об учредителе (участнике) - иностранном юридическом лице',
        'УчрФЛ' => 'Сведения об учредителе (участнике) - физическом лице',
        'УчрРФСубМО' => 'Сведения об учредителе (участнике) - Российской Федерации, субъекте Российской Федерации, муниципальном образовании',
        'УчрПИФ' => 'Сведения о паевом инвестиционном фонде, в состав имущества которого включена доля в уставном капитале',
        'УчрДогИнвТов' => 'Сведения о включении доли в уставном / складочном капитале создаваемого юридического лица в состав общего имущества участников договора инвестиционного товарищества',
        'ТексЗапретРаспДолями' => 'Текст запрета на распоряжение долями в уставном капитале',
        'СвРегСтарые' => 'Сведения о регистрации учредителя (участника) до 01.07.2002 г',
        'СвНедДанУчр' => 'Сведения о недостоверности данных об учредителе (участнике) ',
        'ДоляУстКап' => 'Размер (максимальный размер) доли займодавца в уставном капитале общества с ограниченной ответственностью, которую он может получить (приобрести) в результате реализации соответствующего права по договору конвертируемого займа',
        'СвОбъемПрав' => 'Сведения о предусмотренном корпоративным договором объеме правомочий участника хозяйственного общества (количество голосов, приходящихся на долю участника хозяйственного общества непропорционально размеру этой доли)',
        'СвОбрем' => 'Сведения об обременении доли общества (о залогодержателе и договоре залога)',
        'СвУправЗал' => 'Сведения об управлении залогом доли, принадлежащей обществу',
        'СвДовУпрЮЛ' => 'Сведения о доверительном управляющем - российском или иностранном юридическом лице',
        'СвДовУпрФЛ' => 'Сведения о доверительном управляющем - физическом лице или индивидуальном предпринимателе',
        'ЛицоУпрНасл' => 'Сведения о физическом лице или индивидуальном предпринимателе, осуществляющем управление долей, переходящей в порядке наследования',
        'ДатаОткрНасл' => 'Дата открытия наследства (дата смерти участника)',
        'ВидНаимУчр' => 'Сведения о виде учредителя (участника) и наименовании муниципального образования и региона',
        'СвОргОсущПр' => 'Сведения об органе государственной власти, органе местного самоуправления или о юридическом лице, осуществляющем права учредителя (участника)',
        'СвФЛОсущПр' => 'Сведения о физическом лице, осуществляющем права учредителя (участника)',
        'СвДовУпрЮЛРФ' => 'Сведения о доверительном управляющем - российском юридическом лице',
        'КодУчрРФСубМО' => 'Код вида учредителя',
        'НаимМО' => 'Наименование муниципального образования',
        'КодРегион' => 'Код субъекта Российской Федерации',
        'СвНаимПИФ' => 'Сведения о названии (индивидуальном обозначении) паевого инвестиционного фонда',
        'СвУпрКомпПИФ' => 'Сведения об управляющей компании паевого инвестиционного фонда',
        'НаимПИФ' => 'Название (индивидуальное обозначение) паевого инвестиционного фонда',
        'УпрКомпПиф' => 'Наименование и (при наличии) ОГРН и ИНН управляющей компании паевого инвестиционного фонда',
        'ИнПрДогИнвТов' => 'Индивидуальные признаки договора инвестиционного товарищества',
        'СвУпТовЮЛ' => 'Сведения об уполномоченном управляющем товарище - российском юридическом лице',
        'СвУпТовИнЮЛ' => 'Сведения об уполномоченном управляющем товарище - иностранном юридическом лице',
        'НаимДог' => 'Наименование договора',
        'НомерДог' => 'Регистрационный номер договора в реестре нотариальных действий',
        'Дата' => 'Дата договора',
        'ФИОНотариус' => 'Фамилия, имя, отчество нотариуса, удостоверившего договор конвертируемого займа',
        'Номер' => 'Номер договора',
        'ЗаймДавФЛ' => 'Сведения о займодавце - физическом лице',
        'ЗаймДавЮЛ' => 'Сведения о займодавце - российском или иностранном юридическом лице',
        'НоминСтоим' => 'Номинальная стоимость доли в рублях',
        'РазмерДоли' => 'Размер доли (в процентах или в виде дроби - десятичной или простой)',
        'ДержРеестрАО' => 'Наименование, ОГРН и ИНН держателя реестра акционеров акционерного общества',
        'НомерЕРУЛ' => 'Номер лицензии, присвоенный в Едином реестре учета лицензий',
        'НомЛиц' => 'Серия и номер лицензии',
        'ДатаЛиц' => 'Дата лицензии',
        'ДатаНачЛиц' => 'Дата начала действия лицензии',
        'ДатаОкончЛиц' => 'Дата окончания действия лицензии',
        'НаимЛицВидДеят' => 'Наименование лицензируемого вида деятельности, на который выдана лицензия',
        'ЛицОргВыдЛиц' => 'Наименование лицензирующего органа, выдавшего или переоформившего лицензию',
        'СвПриостЛиц' => 'Сведения о приостановлении действия лицензии',
        'ДатаПриостЛиц' => 'Дата приостановления действия лицензии',
        'ЛицОргПриостЛиц' => 'Наименование лицензирующего органа, приостановившего действие лицензии',
        'СвФилиал' => 'Сведения о филиалах юридического лица',
        'СвПредстав' => 'Сведения о представительствах юридического лица',
        'СвНаим' => 'Сведения о наименовании представительства',
        'АдрМНРФ' => 'Адрес места нахождения на территории Российской Федерации (в структуре КЛАДР)',
        'АдрМНФИАС' => 'Адрес места нахождения на территории Российской Федерации (в структуре ФИАС)',
        'АдрМНИн' => 'Место нахождения за пределами территории Российской Федерации',
        'СвАкрФилПредст' => 'Сведения об аккредитованном представительстве, через которое ранее осуществлялась деятельность',
        'СвУчетНОФилиал' => 'Сведения об учете в налоговом органе по месту нахождения филиала',
        'СвУчетНОПредстав' => 'Сведения об учете в налоговом органе по месту нахождения представительства',
        'ГРНДатаИзмСостРеоргЮЛ' => 'ГРН и дата внесения записи, которой в ЕГРЮЛ внесены сведения об изменении состава участвующих в реорганизации юридических лиц',
        'СвРеоргЮЛ' => 'Сведения о юридических лицах, участвующих в реорганизации',
        'СостЮЛпосле' => 'Состояние юридического лица после завершения реорганизации',
        'СвЮЛсложнРеорг' => 'Сведения о юридическом лице, которое было создано в форме слияния с участием правопреемника, или к которому присоединился правопреемник при реорганизации в форме выделения или разделения с одновременным присоединением или слиянием',
        'ИдЗап' => 'Системный идентификатор записи',
        'ГРН' => 'Государственный регистрационный номер записи',
        'ДатаЗап' => 'Дата внесения записи в ЕГРЮЛ',
        'ВидЗап' => 'Сведения о причине внесения записи в ЕГРЮЛ',
        'СведПредДок' => 'Сведения о документах, представленных при внесении записи в ЕГРЮЛ',
        'СвСвид' => 'Сведения о свидетельстве, подтверждающем факт внесения записи в ЕГРЮЛ',
        'ГРНДатаИспрПред' => 'ГРН и дата записи, в которую внесены исправления',
        'ГРНДатаНедПред' => 'ГРН и дата записи, которая признана недействительной',
        'СвСтатусЗап' => 'Сведения о статусе записи',
        'НаимДок' => 'Наименование документа',
        'НомДок' => 'Номер документа',
        'ДатаДок' => 'Дата документа',
        'Серия' => 'Серия бланка свидетельства',
        'ДатаВыдСвид' => 'Дата выдачи свидетельства ',
        'ГРНДатаСвидНед' => 'ГРН и дата внесения в ЕГРЮЛ записи, содержащей сведения о признании свидетельства недействительным по решению суда',
        'ГРНДатаНед' => 'ГРН и дата внесения записи, которой данная запись признана недействительной',
        'АдрИнЕГРЮЛТип' => 'Сведения о месте нахождения за пределами территории Российской Федерации, содержащиеся в ЕГРЮЛ',
        'АдрРФЕГРЮЛТип' => 'Сведения об адресе в Российской Федерации в структуре КЛАДР, содержащиеся в ЕГРЮЛ',
        'Индекс' => 'Индекс',
        'КодАдрКладр' => 'Код адреса по КЛАДР',
        'Дом' => 'Дом (владение и т.п.)',
        'Корпус' => 'Корпус (строение и т.п.)',
        'Кварт' => 'Квартира (офис и т.п.)',
        'Улица' => 'Улица (проспект, переулок и т.п.)',
        'АдрФИАСЕГРЮЛТип' => 'Сведения об адресе в Российской Федерации в структуре ФИАС, содержащиеся в ЕГРЮЛ',
        'ЭлПланСтруктур' => 'Элемент планировочной структуры',
        'ЭлУлДорСети' => 'Элемент улично-дорожной сети',
        'Здание' => 'Здание / сооружение',
        'ПомещЗдания' => 'Помещение в пределах здания, сооружения',
        'ПомещКвартиры' => 'Помещение в пределах квартиры',
        'ВидЗапТип' => 'Сведения о причине внесения записи в реестр (ЕГРЮЛ или ЕГРИП)',
        'КодСПВЗ' => 'Код вида записи (причины внесения записи в ЕГРЮЛ или ЕГРИП) по справочнику СПВЗ',
        'НаимВидЗап' => 'Наименование вида записи (причины внесения записи в ЕГРЮЛ или ЕГРИП)',
        'ВидНаимКодТип' => 'Сведения о виде (код) и наименовании адресного элемента',
        'ВидКод' => 'Вид (код) элемента',
        'Наим' => 'Наименование элемента',
        'ВидНаимПТип' => 'Сведения о виде и наименовании адресного элемента',
        'Вид' => 'Вид элемента',
        'ТипНаимПТип' => 'Сведения о типе и наименовании адресного элемента',
        'Тип' => 'Тип элемента',
        'НомерПТип' => 'Сведения о номере адресного элемента',
        'ГородТип' => 'Сведения об адресообразующем элементе город',
        'ТипГород' => 'Тип элемента город (город, волость и т.п.)',
        'НаимГород' => 'Наименование (элемент город) ',
        'ГРНДатаТип' => 'ГРН и дата внесения записи в ЕГРЮЛ',
        'ДатаЗаписи' => 'Дата внесения записи в ЕГРЮЛ',
        'ДоляУстКапЕГРЮЛТип' => 'Сведения о доле в уставном капитале (складочном капитале, уставном фонде, паевом фонде), содержащиеся в ЕГРЮЛ',
        'РазмерДолиТип' => 'Размер доли (в процентах или в виде дроби - десятичной или простой)',
        'Процент' => 'Размер доли кода ОКВЭД в деятельности ЮЛ в процентах',
        'ДробДесят' => 'Размер доли в десятичных дробях   |',
        'ДробПрост' => 'Размер доли в простых дробях',
        'ДробьТип' => 'Представление простой дроби',
        'Числит' => 'Числитель простой дроби',
        'Знаменат' => 'Знаменатель простой дроби',
        'ИдГРНДатаТип' => 'Идентификатор записи, ГРН и дата внесения записи в ЕГРЮЛ',
        'НаселПунктТип' => 'Сведения об адресообразующем элементе населенный пункт',
        'ТипНаселПункт' => 'Тип элемента населенный пункт (поселок, село и т.п.)',
        'НаимНаселПункт' => 'Наименование (элемент населенный пункт)',
        'ОгрДосСвТип' => 'Сведения об ограничении доступа',
        'РайонТип' => 'Сведения об адресообразующем элементе район',
        'ТипРайон' => 'Тип элемента район (район, улус и т.п.)',
        'НаимРайон' => 'Наименование (элемент район)  ',
        'РегионТип' => 'Сведения об адресообразующем элементе регион',
        'ТипРегион' => 'Тип элемента регион (республика, край и т.п.)',
        'РешСудТип' => 'Сведения о решении суда',
        'НаимСуда' => 'Наименование суда, которым принято решение',
        'СвАкРАФПТип' => 'Сведения об аккредитации представительства или филиала иностранной организации в Российской Федерации',
        'НомерРАФП' => 'Номер записи в РАФП (НЗА) об аккредитации филиала / представительства иностранного юридического лица ',
        'СвГраждТип' => 'Сведения о гражданстве',
        'КодГражд' => 'Код вида гражданства физического лица',
        'СвДовУпрЮЛТип' => 'Сведения о доверительном управляющем - российском или иностранном юридическом лице',
        'НаимИННДовУпр' => 'Сведения о наименовании, ОГРН и ИНН юридического лица',
        'СвДовУпрФЛТип' => 'Сведения о доверительном управляющем - физическом лице или индивидуальном предпринимателе',
        'СвНаимПолнТип' => 'Сведения о полном наименовании',
        'НаимПолн' => 'Полное наименование',
        'СвНаимСокрТип' => 'Сведения о сокращенном наименовании',
        'НаимСокр' => 'Сокращенное наименование',
        'СвНедДанУчрТип' => 'Сведения о недостоверности данных об учредителе (участнике)',
        'ПризнНедДанУчр' => 'Признак недостоверности данных',
        'ТекстНедДанУчр' => 'Текст о недостоверности сведений, выводимый в выписке в строке с наименованием «Дополнительные сведения»',
        'РешСудНедДанУчр' => 'Сведения о решении суда, на основании которого указанные сведения признаны недостоверными',
        'СвНОТип' => 'Сведения о налоговом органе, в котором юридическое лицо или филиал / представительство состоит (состояло) на учете',
        'СвНотУдДогЗалТип' => 'Сведения о нотариальном удостоверении договора залога или договора управления залогом',
        'СвНотариус' => 'ФИО и (при наличии) ИНН нотариуса, удостоверившего договор',
        'СвОбъемПравТип' => 'Сведения о предусмотренном корпоративным договором объеме правомочий участников хозяйственного общества (количество голосов, приходящихся на долю участника хозяйственного общества непропорционально размеру этой доли)',
        'ОбъемПрав' => 'Объем правомочий',
        'СвОбремТип' => 'Сведения об обременении доли (о залогодержателе и договоре залога)',
        'ВидОбрем' => 'Вид обременения',
        'РешСуд' => 'Сведения о решении судебного органа, по которому на долю учредителя (участника) наложено обременение',
        'СвЗалогДержФЛ' => 'Сведения о залогодержателе - физическом лице',
        'СвЗалогДержЮЛ' => 'Сведения о залогодержателе - российском или иностранном юридическом лице',
        'СвНотУдДогЗал' => 'Сведения о нотариальном удостоверении договора залога, в отношении которого введено управление',
        'СвОКВЭДЕГРЮЛТип' => 'Сведения о кодах по Общероссийскому классификатору видов экономической деятельности',
        'СвОКВЭДОсн' => 'Сведения об основном виде деятельности',
        'СвОКВЭДДоп' => 'Сведения о дополнительном виде деятельности',
        'СвОКВЭДТип' => 'Сведения о виде деятельности, содержащиеся в ЕГРЮЛ',
        'КодОКВЭД' => 'Код по Общероссийскому классификатору видов экономической деятельности',
        'НаимОКВЭД' => 'Наименование вида деятельности по Общероссийскому классификатору видов экономической деятельности',
        'ПрВерсОКВЭД' => 'Признак версии Общероссийского классификатора видов экономической деятельности',
        'СвДоляОКВЭД' => 'Сведения о доле данного вида деятельности в деятельности индивидуального предпринимателя и/или о дополнительных сведениях',
        'ДопСведОКВЭД' => 'Дополнительные сведения о виде деятельности',
        'СвНаимПредЮЛТип' => 'Сведения о наименовании представительства или филиала в Российской Федерации, через которое иностранное юридическое лицо осуществляет полномочия управляющей организации',
        'НаимПредЮЛ' => 'Полное наименование аккредитованного филиала / представительства иностранного юридического лица',
        'СвПолФЛТип' => 'Сведения о поле физического лица',
        'Пол' => 'Пол',
        'СвРегИнЮЛЕГРЮЛТип' => 'Сведения о регистрации иностранного юридического лица в стране происхождения, содержащиеся в ЕГРЮЛ',
        'НаимРегОрг' => 'Наименование регистрирующего органа',
        'КодНПСтрРег' => 'Код налогоплательщика в стране происхождения или аналог',
        'АдрСтр' => 'Адрес (место нахождения) в стране происхождения',
        'СвРегОргТип' => 'Сведения о регистрирующем органе',
        'СвУправЗалТип' => 'Сведения об управлении залогом доли участника',
        'СвДогУправЗал' => 'Сведения о договоре управления залогом',
        'СвУпрЗалФЛ' => 'Сведения об управляющем залогом - индивидуальном предпринимателе',
        'СвУпрЗалЮЛ' => 'Сведения об управляющем залогом - российском или иностранном юридическом лице',
        'СвУчетНОПодраздТип' => 'Сведения об учете в налоговом органе по месту нахождения филиала / представительства',
        'СвФЛЕГРЮЛТип' => 'Сведения о фамилии, имени, отчестве и ИНН физического лица, содержащиеся в ЕГРЮЛ',
        'Фамилия' => 'Фамилия',
        'Имя' => 'Имя',
        'Отчество' => 'Отчество',
        'ИННФЛ' => 'ИНН физического лица',
        'СвФИОЗАГСТип' => 'Сведения о фамилии, имени, отчестве физического лица по данным ЗАГС',
        'СвЮЛЕГРЮЛТип' => 'Сведения о наименовании, ОГРН и ИНН юридического лица - учредителя (участника), управляющей организации, залогодержателя, управляющего долей участника, содержащиеся в ЕГРЮЛ',
        'СвАкрФилПредТип' => 'Сведения об аккредитованном филиале / представительстве иностранного юридического лица, через который / которое ранее осуществлялась деятельность',
        'ДатаАкрРАФП' => 'Дата аккредитации филиала / представительства иностранного юридического лица',
        'УлицаТип' => 'Сведения об адресообразующем элементе улица',
        'ТипУлица' => 'Тип адресного объекта улица (улица, проспект, переулок и т.п.)',
        'НаимУлица' => 'Наименование (элемент улица) ',
        'ФИОТип' => 'Фамилия, имя, отчество',
    ];

    private $requestData;    
    private $filePath;
    
    private $html;

    private $props;
    private $elementId;
    private $messageId;
    private $originalMessageId;
    private $nodeValue;

    public function setData(array $request) {
        if (isset($request['type'])){
            //если запрос из нашей формы (форма)
            $this->setDataFromForm($request);
        } else {
            //если запрос из вне (xml)
            $this->setDataFromXml($request);
        }
    }

    public function setDataFromForm($request){
        $this->setPropsElement($request);
    }

    public function setDataFromXml($request){
        $this->messageId = $this->getNodeFromXmlArray($request, 'MessageID');
        $this->originalMessageId = $this->getNodeFromXmlArray($request, 'OriginalMessageId');
        $this->props['filter'] = $request['filter'] ?? ['CODE' => $this->originalMessageId];
        $this->requestData = $request;

        $this->props['OGRN'] = $this->requestData['Документ']['СвЮЛ']['@attributes']['ИНН'];
        $this->props['INN'] = $this->requestData['Документ']['СвЮЛ']['СвОбрЮЛ']['@attributes']['ОГРН'];

        //Установили свойства элемента
        $this->setPropsElement( [
            'OGRN' => $this->requestData['Документ']['СвЮЛ']['@attributes']['ОГРН'],
            'INN' => $this->requestData['Документ']['СвЮЛ']['@attributes']['ИНН'],
            'SHORTNAME' => $this->requestData['Документ']['СвЮЛ']['СвНаимЮЛ']['СвНаимЮЛСокр']['@attributes']['НаимСокр'],
            'NAME' => $this->requestData['Документ']['СвЮЛ']['СвНаимЮЛ']['@attributes']['НаимЮЛПолн'],    
            'DOCUMENT' => [
                [        
                    'VALUE' => $this->file(),
                    'DESCRIPTION' => '',
                ],
            ],
            'XML' => [
                'TEXT' => file_get_contents('php://input'),
                'TYPE' => 'text'
            ]
        ]);
    }

    private function getNodeFromXmlArray(array $xmlArray, string $nodeName)
    {
        //$resultNodeValue=($nodeValue)?$nodeValue:false;
        foreach ($xmlArray as $key => $value) {
            if ($key === $nodeName) {
                $this->nodeValue = $value;
                break;
            } else {
                if (gettype($value) == 'array') {
                    $this->getNodeFromXmlArray($value, $nodeName);
                }
            }
        }

        return $this->nodeValue;
    }

    private function genFilter(string $type = NULL){
        if($type == 'inn'){
            if ($this->props['INN']){

                return [
                    'IBLOCK_ID' => static::IBLOCK_ID,
                    '=PROPERTY_INN' => $this->props['INN']
                ];
            }

            return ["ID" => -1];
        }
        if($type == 'ogrn'){
            if ($this->props['OGRN']){

                return [
                    'IBLOCK_ID' => static::IBLOCK_ID,
                    '=PROPERTY_OGRN' => $this->props['OGRN']
                ];
            }

            return ["ID" => -1];
        }

        return ["ID" => -1];
    }

    public function searchElement()
    {
        if (!$this->elementId) {
            $this->props["filter"]["IBLOCK_ID"] = static::IBLOCK_ID;
            $resByCode = \CIBlockElement::GetList(
                ['TIMESTAMP_X' => 'DESC'],
                $this->props["filter"],
                false,
                ["nPageSize" => 1],
                ["ID", "IBLOCK_ID", "CODE", "XML_ID"]
            );

            if ($order = $resByCode->GetNext()) {
                $this->elementId = $order['ID'];
            }
        }

        return $this->elementId ?? false;
    }


    /* Устанавливаем свойства дял записи элемета */
    public function setPropsElement($props){
        foreach ($props as $key => $prop){
            $this->props[$key] = $prop;
        }
    }

    // Обновляем элемент в ИБ
    public function updateElement(){
         if($this->elementId){

             //Если элемент обновляется из запроса rest/responses - то там будут пустые ИНН и ОГРН.
             //Нормально элемент обновится только из метода rest/attachments
             if (empty($this->props['INN']) && empty($this->props['OGRN'])) {
                 Log::info($_SERVER["DOCUMENT_ROOT"].'/logs/update_element/SERVER/logs-' . date('d_m_Y_H_i_s') . '.txt',
                     var_export($_SERVER, 1));
                 Log::info($_SERVER["DOCUMENT_ROOT"].'/logs/update_element/REQUEST/logs-' . date('d_m_Y_H_i_s') . '.txt',
                     var_export($_REQUEST, 1));
                 Log::info($_SERVER["DOCUMENT_ROOT"].'/logs/update_element/BACKTRACE/logs-' . date('d_m_Y_H_i_s') . '.txt',
                     var_export(debug_backtrace(), 1));

                 //Отправляем сообщение админам
                 \CEvent::Send("ELEMENT_UPDATE_EMPTY_PROPS", "s1",
                     ['ENTITY_TYPE' => 'ФНС', 'ENTITY_ID' => $this->elementId], "N", "");

                 $elementInn = Helper::getIblockElementProps($this->getIblockId(), $this->elementId, 'INN')['INN'];
                 $elementOgrn = Helper::getIblockElementProps($this->getIblockId(), $this->elementId, 'OGRN')['OGRN'];
                 $this->props['INN'] = $elementInn;
                 $this->props['OGRN'] = $elementOgrn;

                 $el = new \CIBlockElement;
                 $res = $el->Update($this->elementId, ['XML_ID' => $this->messageId]);

                 return false;
             }


            //Обновить элемент
            \CIBlockElement::SetPropertyValuesEx(
                $this->elementId,
                $this->getIblockId(),
                $this->props,
            );

             $el = new \CIBlockElement;
             $res = $el->Update($this->elementId, ['XML_ID' => $this->messageId]);
        } else {
            return false;
        }

        return true;
    }

    //Добавляет элемент в ИБ
    public function add(): int
    {
        global $USER;
        $params = [
            'IBLOCK_ID' => self::IBLOCK_ID,
            'NAME' => 'Запрос на получение сведений',
            'CREATED_BY' => $USER->GetID(),
            'ACTIVE' => 'Y',
            "IBLOCK_SECTION_ID" => false,
            "PROPERTY_VALUES" => $this->props
        ];

        $el = new \CIBlockElement;
        $this->elementId = $el->Add($params);

		if ($this->elementId > 0) {
			// if ($workFlowId > 0) {
			// 	$workFlowId = self::startWorkflow($iblockId, $elemId, $workFlowId );
			// 	if (!$workFlowId) {
			// 		echo ('Ошибка исполнения бизнес-процесса ' . $iblockId . "\n" . $workFlowId);
			// 		die();
			// 	}
			// }
            return $this->elementId;
        } else {
            throw new \Exception ('Ошибка добавления элемента в инфоблок ' . self::IBLOCK_ID . "\n" . $el->LAST_ERROR);
        }
        
    }

    public function createSoapResponseRequest(){                        
        ob_start();
        echo '<?xml version="1.0" encoding="UTF-8"?>';
        ?>
        <tns:OTSVEGRULRequest xmlns:tns="urn://x-artefacts-fns-otsvegrul/root/312-79/4.0.1" ИдЗапрос="<?=\MyCompany\WebService\Helper::genUuid()?>">
            <tns:ЗапросЮЛ>
                <? if ($this->props['INN'] != '') { ?>
                    <tns:ИННЮЛ><?= $this->props['INN'] ?></tns:ИННЮЛ>
                <? } elseif ($this->props['OGRN'] != '') { ?>
                    <tns:ОГРН><?= $this->props['OGRN'] ?></tns:ОГРН>
                <? } ?>
            </tns:ЗапросЮЛ>
        </tns:OTSVEGRULRequest>
        <?
        return ob_get_clean();
    }

    /* получить файл выписки */
    private function file(){
        if ($this->filePath){
            return \CFile::MakeFileArray($this->filePath);
        } else {
            if (!$this->html){
                $this->createHTML();
            }
            return \CFile::MakeFileArray($this->saveFile());
        }
    }

    private function removeFile(){
        unlink($this->filePath);
    }

    /* получить html выписки */
    private function HTML(){
        if (!$this->html){
            $this->createHTML();
        }
        return $this->html;
    }
    
    private function createHTML()
    {
        if ($this->requestData){
            ob_start(); ?>
            <!DOCTYPE html SYSTEM "about:legacy-compat">
            <html>

            <head>
                <META http-equiv="Content-Type" content="text/html; charset=UTF-8">
                <style type="text/css">
                    html,
                    body {
                        margin: 0;
                        padding: 0;
                        border: 0;
                        outline: 0;
                        color: #666;
                        font: 10pt arial, helvetica, sans-serif;
                        line-height: 1.5;

                        text-shadow: 1px 1px 0px #fff;
                        background-color: #fafafa;
                        -webkit-font-smoothing: antialiased;
                    }

                    #wrapper {
                        width: 800px;
                        margin: 20px auto;
                    }

                    .title,
                    .nodata,
                    .nodata_small,
                    .hasdata,
                    .info,
                    .info_left,
                    .info_right {
                        font-size: 12pt;
                        font-weight: bold;
                        text-align: center;
                        margin: 10px auto;
                    }

                    .title h1,
                    h2 {
                        font-weight: bold;
                        font-size: 12pt;
                        margin: 0 0;
                    }

                    .title h2 {
                        font-weight: normal;
                    }

                    .nodata {
                        color: #C00;
                    }

                    .nodata_small {
                        font-size: 10pt;
                        color: #C00;
                    }

                    .info_left {
                        text-align: left;
                    }

                    .info_right {
                        text-align: right;
                    }

                    .central {
                        text-align: center;

                    }

                    :focus {
                        outline: 0;
                    }

                    ol,
                    ul {
                        list-style: none;
                    }

                    table {
                        border-collapse: collapse;
                        border-spacing: 0;
                        width: 100%;
                        text-shadow: 1px 1px 0px #fff;
                        background: #eaebec;
                        border: #ccc 1px solid;
                        border-collapse: separate;
                        margin-bottom: 10px;

                        -moz-border-radius: 3px;
                        -webkit-border-radius: 3px;
                        border-radius: 3px;

                        -moz-box-shadow: 0 1px 2px #d1d1d1;
                        -webkit-box-shadow: 0 1px 2px #d1d1d1;
                        box-shadow: 0 1px 2px #d1d1d1;

                    }

                    table th {
                        font-weight: bold;
                        text-align: center;
                        padding: 10px 25px 10px 25px;
                        border-top: 1px solid #fafafa;
                        border-bottom: 1px solid #e0e0e0;
                        background: #ededed;
                        background: -webkit-gradient(linear, left top, left bottom, from(#ededed), to(#ebebeb));
                        background: -moz-linear-gradient(top, #ededed, #ebebeb);
                    }

                    table tr:first-child th:first-child {
                        -moz-border-radius-topleft: 3px;
                        -webkit-border-top-left-radius: 3px;
                        border-top-left-radius: 3px;
                    }

                    table tr:first-child th:last-child {
                        -moz-border-radius-topright: 3px;
                        -webkit-border-top-right-radius: 3px;
                        border-top-right-radius: 3px;
                    }

                    table tr td {
                        padding: 10px;
                        border-top: 1px solid #ffffff;
                        border-bottom: 1px solid #e0e0e0;
                        border-left: 1px solid #e0e0e0;

                        background: #fafafa;
                        background: -webkit-gradient(linear, left top, left bottom, from(#fbfbfb), to(#fafafa));
                        background: -moz-linear-gradient(top, #fbfbfb, #fafafa);
                    }

                    table td {
                        vertical-align: top;
                    }

                    table tr:nth-child(even) td {
                        background: #f6f6f6;
                        background: -webkit-gradient(linear, left top, left bottom, from(#f8f8f8), to(#f6f6f6));
                        background: -moz-linear-gradient(top, #f8f8f8, #f6f6f6);
                    }

                    table tr:last-child td {
                        border-bottom: 0;
                    }

                    table tr:last-child td:first-child {
                        -moz-border-radius-bottomleft: 3px;
                        -webkit-border-bottom-left-radius: 3px;
                        border-bottom-left-radius: 3px;
                    }

                    table tr:last-child td:last-child {
                        -moz-border-radius-bottomright: 3px;
                        -webkit-border-bottom-right-radius: 3px;
                        border-bottom-right-radius: 3px;
                    }

                    table tr:hover td {
                        background: #f2f2f2;
                        background: -webkit-gradient(linear, left top, left bottom, from(#f2f2f2), to(#f0f0f0));
                        background: -moz-linear-gradient(top, #f2f2f2, #f0f0f0);
                    }

                    tr:hover td#nohover {
                        background: #f6f6f6;
                        background: -webkit-gradient(linear, left top, left bottom, from(#f8f8f8), to(#f6f6f6));
                        background: -moz-linear-gradient(top, #f8f8f8, #f6f6f6);
                    }

                    /* РЅР° Р±СѓРґСѓС‰РµРµ */
                    table a:link {
                        color: #666;
                        text-decoration: underline;
                    }

                    table a:visited {
                        color: #999999;
                        font-weight: bold;
                        text-decoration: none;
                    }

                    table a:active,
                    table a:hover {
                        color: #bd5a35;
                        text-decoration: underline;
                    }
                </style>
                <style type="text/css">
                    #dsig {
                        /* заглушка */
                    }

                    .dsig-table {
                        font-size: 8pt;
                        valign: top;
                    }

                    .dsig-table td {
                        vertical-align: top;
                    }

                    .dsig-table .left {
                        text-align: left;
                    }

                    .dsig-table .right {
                        text-align: right;
                    }

                    .dsig-table tr:hover td {
                        background: #fafafa;
                        background: -webkit-gradient(linear, left top, left bottom, from(#fbfbfb), to(#fafafa));
                        background: -moz-linear-gradient(top, #fbfbfb, #fafafa);
                    }
                </style>
                <title>ФНС. Выписки из ЕГРЮЛ по запросам органов государственной власти</title>
            </head>

            <body>
                <div id="wrapper">
                    <div class="title">
                        <h1>Федеральная налоговая служба</h1>
                        <h2>Выписка из ЕГРЮЛ по запросам органов государственной власти</h2>
                    </div>

                    Дата формирования выписки: <?= $this->requestData['Документ']['СвЮЛ']['@attributes']['ДатаВып'] ?> <br>
                    Настоящая выписка содержит сведения о юридическом лице: <br> <?= $this->requestData['Документ']['СвЮЛ']['СвНаимЮЛ']['@attributes']['НаимЮЛПолн'] ?> <br>

                    ИНН: <?= $this->requestData['Документ']['СвЮЛ']['@attributes']['ИНН'] ?>
                    ОГРН: <?= $this->requestData['Документ']['СвЮЛ']['@attributes']['ОГРН'] ?>
                    КПП: <?= $this->requestData['Документ']['СвЮЛ']['@attributes']['КПП'] ?>

                    <table>
                        <tr>
                            <td width="50%">Идентификатор запроса</td>
                            <td><?= $this->requestData['Документ']['@attributes']['ИдДок'] ?></td>
                        </tr>
                    </table>

                    <? foreach ($this->requestData['Документ']['СвЮЛ'] as $key => $table) {
                        $this->getTable($key, $table, 'СвЮЛ');
                    } ?>
                </div>
            </body>

            </html>
            <? $this->html = ob_get_clean();
        } else {
            throw new Exception('свойство $this->requestData не заполнено');
        }
    }

    private function getTable($key, $table, $parent)
    { ?>
        <table width="100%">
            <? $this->getTablePart($key, $table, $parent); ?>
        </table>
        <?
    }

    private function getTablePart($key, $table, $parent)
    {
        if ($key == '@attributes') { ?>
            <tr>
                <th align="center" colspan="2">
                    <? echo static::GLOSSARY[$parent]; ?>
                </th>
            </tr>
        <? } 
        foreach ($table as $key_2 => $attr) {
            if (is_array($attr)) {
                $this->getTablePart($key_2, $attr, $key);
            } else { ?>
                <tr>
                    <td width="50%">
                        <?= static::GLOSSARY[$key_2]; ?>
                    </td>
                    <td><?= $attr ?></td>
                </tr>
            <? } ?>
        <? }
    }

    private function saveFile(){        
        $saveDir = $_SERVER["DOCUMENT_ROOT"] . '/upload/tmp_excerpt_egrul/';
        if (!file_exists($saveDir)){
            mkdir($saveDir, 0775, true);    
        }
        $result = file_put_contents(
            $saveDir .$this->requestData['Документ']['@attributes']['ИдДок'].'.html', 
            $this->html
        );     
        if ($result !== false) {
            $this->filePath = $saveDir .$this->requestData['Документ']['@attributes']['ИдДок'].'.html';
            return $this->filePath;
        } else {
            throw new \Exception('Ошибка записи в файл');
        }
    }

    
    public function getMessageId(): string
    {
        return $this->messageId;
    }

    public function getIblockId(): int
    {
        return static::IBLOCK_ID;
    }

    public function getWorkflowId(): int
    {
        return static::WORKFLOW_ID;
    }

    function __destruct() {
        if ($this->filePath){
            $this->removeFile();
        }
    }
}
